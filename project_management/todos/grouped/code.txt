! toString fuer Joint: net.sf.josceleton.core.api.entity.body.JointsImplProvider$RightHipImpl@4463a1ae
!! oja doch: auf jeden fall fuer guice module PrivateModule verwenden
	=> je weniger nach aussen hin zugreifbar/bekannt desto besser => weniger abhaengigkeiten, weniger API == besser!
- @CODE rename ClassAdapter to ClassWrapper
-- @CODE mehr eigene exception typen (auch fuer tests wichtig)
- refactor core module:
	* ist eigentlich ein "entity" module
	* async raus geben aus josceleton scope => commons (evtl commons daweil noch nicht aufsplitten in commons-async etc)
- remove Util classes (not all, only some) from pulse, as were already moved to josceleton commons
- equals/hashcode/toString schreiben; vor allem VOs, zb: SkeletonImpl!!! GestureConfigs
!! @code: unbedingt auf SYNCHRONIZED achten ob gebraucht (da ja alles async ist, multi-threaded!!)
- @CODE very LUXURY: listeners komplett mit events umbauen
	* in Listeners, alle onXyz(..) ersetzen durch:
		on(XyzMovedEvent)
		on(XyzAbortedEvent)
	+ Event.getSource():Object
======================================================

!!! @code: BodyRecentStorage.getBodyPartCoordinate(BodyPart):Coordinate THROWS NoCoordinatesDataAvailableException == CheckedException!
	... es kann ja sein, dass noch gar keine daten verfuegbar sind, wenn zb kamera fuesse no net gsehn hat, und man fussdaten haben will
!! @OscPortImpl#addListenerFor: DESIGN maybe OSCListener listener should not be directly listening to openedPort, but rather...
	... have own dispatching pool, and act as a mediator.
	=> side effect: if close() invoked, we really have message dispatching under full control!
!! @API code: wenn < 0.0 kommt dann limitieren (genauso wenn >1.0 bzw >7.0)
! @osceleton unique id error failsafe issue
	- UserFactory hat eine resetCounter() methode
	- rename UserStore to InternalUserCache
	! UserService hat kein getXyUsers, sondern gibt ein zusaetzliches (super-interface? NEIN!) UserCollection
		=> damit bleibt klasse schlank
		* UserServiceFactory instanziiert nun klassen a la: UserService create(..) { return new UserServiceImpl(.., new UserCollectionImpl()); }
		* favour aggregation over inheritance!
! @Code interface Listener zu Listener<T> umaendern
	=> somit wird jede Listener type nicht nur beim namen assoziiert, sondern auch per typ(variable)
! @OscPortImpl.yetClosed: REFACTOR DRY closed/established state already in CloseableAndAsyncSkeleton (see ConnectionInternalImpl)
! @CODE it should be valid to invoke addListener, though connection was not yet established
	- otherwise have to register after establishing => messages could have been not listened for... minor, but still...
- @CODE: nicht nur alle param-finals weg, auch in test vollqualifizierungen wegnehmen (zb "this.mock()" => "mock()")
- check all custom equals implementations, if they are checking instanceof against interface, not *Impl!!! (and if they have shortcut check "if(this == other)")
- nochmal: wie gscheid loggen? wenn zb guice nimmt, heissts irgendwas von wegen "SLF4J loggers"?/
-- introduce new tasktag "TEST" (medium prio)
-- ? should equals/hashCode/toString be final? (check all value objects!)
-- @DynamicInstantiatorImpl#create: REFACTOR outsource array-check-for-null-values
-- @ConnectorImpl: REFACTOR outsource default osceleton port from code into some property/build related artifact
-- ? have factories also to be declared with Scope SINGLETON?
-- @ReflectUtil#isAssignable: @EXCEPTION dont throw runtime ex but custom josceleton ex
-- @GenericMessageImpl: DRY shouldnt be skeleton implementations of equals/hash/tostring in here? (to reuse it)
-- @OsceletonJointConstants actually there is also a Osceleton(Message)Jonstants class, providing "new_user", etc...
-- @OscMessageTransformerImpl#transformUserMessage: EXCEPTION could use a custom exception (same as above)
-- @Async: is Async.removeAllListeners() needed??
--- um metrik "static methods/classes" runterzubekommen, irgendwie das Body enum besser ausloesen (oder ganz oarg: ganz rausgeben aus jocseleton reactor ;)
--- @OscMessageTransformerImpl REFACTOR outsource string to userstate/bodypart conversion from transformer ("USER_STATE_BY_ADDRESS")
--- REALLY LUXURY @OscPortImpl#checkYetClosed: EXCEPTION could have stored invoker of close() method by analyzing stacktrace ;)
--- @BodyPart: DESIGN glitch: osceleton ID should not be part of this interface, as it is only used internally (for transformation) ...!
--- @ClassAdapter#getConstructors(): REFACTOR should return ConstructorAdapter instead of Constructor
