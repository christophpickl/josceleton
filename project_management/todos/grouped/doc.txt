
======================================================
@METRICS
======================================================
- ? which coveragte tool: maven-clover-plugin / emma / cobertura ?
! unbedingt automatisch eclipse metrics erfassen!!!
	1. ist haendisch muehsam
	2. src/test sollte separat (plus aggregiert) gehandhabt werden
	3. mehre dimensionen: per metrik, per modul, per main/test, per version (+gesamt aggregiert, nicht nur per moduleee)
!rethink: was sind eigentlich wirklich interessante metriken; zb total LoC:
	- per modul vs aggregiert && src/main vs src/test vs kombiniert // hier schoen gegenueberstellbar: wieviel testcode im vergleich zu produktivcode ;)
- @Code Metrics: display figures for each module AND aggregated
- @Code Metrics: add links to generated reports (and also to changes/changelog report)
-- alte versionen auschecken und metriken erfassen
-- LUXURY am besten aus ganze metriken ein (mehrere) flex chart(s) machen, und als swf einbinden

======================================================
@JAVADOC
======================================================
- script schreiben, dass von allen klassen ein @since ausspuckt (svn history durchgehen, date vergleichen die konfiguriert wurden)
- exclude non-api/impl.* classes in javadoc
	<excludePackageNames>_templates:net:sf:josceleton:core:impl ... etc</excludePackageNames>-->
- customize style 
	<plugin><groupId>javolution</groupId><artifactId>colapi</artifactId><version>1.0.0</version>
    <executions><execution><goals><goal>colorize</goal></goals></execution></executions</plugin>
- include UML graphs 
	eg: http://maven.apache.org/plugins/maven-javadoc-plugin/examples/alternate-doclet.html 
	... or generate diagrams with APIviz: http://code.google.com/p/apiviz/ 
- use multiple javadoc reports (plain + for UML graphs)
	see: http://docs.codehaus.org/display/MAVENUSER/Reporting+Plugins
- @ SITE JAVADOC create package.java :)
! @JAVADOC: wenn alles zam-aggregiert ist, sollen *-impl modulklassen nicht sichtbar sein
	=> YES: do this by setting javadoc-plugin config option; eg ~"<docExcludes>"
	// NO: dann muss auch in allen *-impl modulen alle public klassen ein ~"@NoJavadoc" annotation draufhaben
-- @JAVADOC fuer alle klassen (nicht nur in api) ein @since tag drauf geben (doc wird nachher eh nicht einsehbar sein vom user)
--- improve javadoc:
	* http://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html ... ${basedir}/src/main/javadoc/overview.html
	* @doclava: make use of custom tags: http://code.google.com/p/doclava/wiki/JavadocTags
	* @doclava: make since tag appear; officially not supported, but guice doc has it!!!
@Javadoc custom skin
// http://code.google.com/p/doclava/ threw an nullpoint exception; but i think i can remember it worked once; if it was this one...

======================================================
@MORE REPORTS
======================================================
! mehr reports: welche datei wurde am haeufigsten veraendert (changesets, changelist, oder dgl)
- @POM enable more default reports:
	ENABLED: dependencies, project-team, issue-tracking, license, scm, summary
	MAYBE: distribution-management, modules, dependency-management, plugins, plugin-management 
	WHAT FOR: help, index, dependency-convergence
	DEFINETELY NOT: mailing-list, cim
- @POM include more reporting plugins:
	- org.codehaus.mojo :: simian-report-maven-plugin (configuration.minimumThreshold=2)
	- changelog plugin, siehe: http://qalab.sourceforge.net/multiproject/maven2-qalab-plugin/changelog.html
	- changes plugin siehe: http://qalab.sourceforge.net/multiproject/maven2-qalab-plugin/changes-report.html
	- file activity report: http://qalab.sourceforge.net/multiproject/maven2-qalab-plugin/file-activity.html
	-- developer activity report: http://qalab.sourceforge.net/multiproject/maven2-qalab-plugin/dev-activity.html
- @project-info-reports-plugin: use custom template (maybe for skin) configuration.<templateFile>

======================================================
!! @doc: variables in xdoc are not evaluated, eg ${project.version} (used for internal links)
! @site: derzeitige site wirklich nur fuer internal nutzen => von aussen offizielle seite is was huebscheres (zb typo3 vom thomas)
	// zb wordpress verwenden um codesamples und dgl (ideen, andere kinect projekte) posten
! mvn dependency graph grafik machen lassen
! @DOC anderes video verwenden, das von primesense: http://www.youtube.com/watch?v=nr8vgCnb9_0
	- @site: video auf startseite austauschen -AUF JEDEN
		* am besten eigenes machen, mit guter musik
		* darunter dann link "mehr videos" => interne kleine seite mit guter kinect-videosammlung
! direkt download latest link verwenden http://sourceforge.net/projects/josceleton/files/latest
	+ so wie bei jpotpourri, oben rechts im eck auf startseite "download box" hingeben
! let josceleton-reactor deploy doc twice: 2nd time to /htdocs/ root folder to access it from outside via: http://josceleton.sf.net/
	?? oder wie sonst loesen, ausser wie daweil mit redirect?
! add multimedia stuff: diagram of architecture
! in doc alle klassenreferenzen mit javadoc verlinken
! mvn2_and_3_parallel-setmvn.sh file => als site dokumentieren/ersetzen
! @DOC alle samples mit import statments (und halt run methode! damits 1:1 copy und pastebar ist; ohne package zeile)
! @DOC "troubleshooting / osceleton":
	"$ osceleton 
	"There was a problem initializing kinect... Make sure you have connected both usb and power cables and that the driver and OpenNI framework are correctly installed."
! @POM carefully think about solution how to deploy everything (exception reactors of course) into /documentation/<artifactId>/<version>/
	AND got a second release version to josceleton.sf.net/ root?
	maybe: outsource site url part as property (could be the case submodule wants to override)
	==> better: manually (semi manually, could be heavily automated) deploy a second time to a different url
- @site: kontaktmoeglichkeit(en) gut hervorheben (einfach muss es sein; darf keine registrierung oder so benoetigen)
! ? how to colorize code samples in doc?
! @Download pom sample, dass wenn leute selber guice verwenden (aop & assisted) verwenden, dann excluden
	<dependency><groupId>net.sf.josceleton</groupId><artifactId>josceleton</artifactId>
	<exclusions><!-- exclude josceleton's own guice dependency --><exclusion><groupId> net.sf.josceleton.thirdparty.com.google.code.guice </groupId>
	<artifactId> guice-dependencies </artifactId></exclusion></exclusions></dependency><dependency>com.google.code.guice _ guice _ 2.0</dependency>
! @DOC auch ein bissi mehr OSCeleton beschreiben!
	! vor allem dass man psi position gehn muss

- document components <source><![CDATA[Josceleton > Java OSC > OSCeleton > OpenNI & Co > Kinect Hardwere]]></source>
- write handbook on how to execute manual tests after release built
- @Download: anmerken unterschied profile.activeByDefault vs activeProfiles.activeProfile
	+ bsp schreiben + sagen, dass (anscheinbar) keinen unterschied gibt + vertrauenswuerdige url fuer diese tatsache liefern

- check everything if references in site two classes should be linked to javadoc
	eg: Samples
- @Release Handbook: would be nice to have a "copy-to-clipboard button" on page, to copy release plan template
- @Josceleton/src/site.xml: how to reference (other) josceleton modules submodules? maybe this way:
	<menu name="Submodules"><item name="Core Implementation" href="/documentation/core-impl/${some.var}/" /></menu>
- linkchecker verify plugin suchen+verwenden
- @sf download statistik anschauen; profil ueberarbeiten; a bissi umschaun
- feine doku ebenfalls: http://testnguice.googlecode.com/svn/site/2.0/index.html
	* definitiv NICHT josceleton als site deployen lassen!
	// recent josceletion version numbers in corporate-pom schieben => braucht zugang von eigenes site modul auf versionsnr um in links darauf zu verweisen a la: /documentation/foobar/1.8/

- @build fix that tests are not run twice because of surefire: https://maven.apache.org/plugins/maven-surefire-report-plugin/faq.html
-- @site.xml: publishDate should be with time for snapshots ("yyyy-MM-dd HH:mm")
-- @DOC create custom maven site skin
-- @XDOC welche properties kann man fuer xdoc seiten alles angeben?
-- page fuer internal devs: (aehnlich wie "workspace setup") ssh command, welche shellscripts nuetzlich sein koennen, welche profile es gibt + was machen sie, ...
--- auf startseite iframe mit dynamischen content anzeigen (evtl sourceforge news anzapfen, oder dgl das von aussen geaendert werden kann ohne deploy notwendig)
--- // lesson learned beim projekt: "der unterschied zwischen chaos und ordnung ist der, dass sich in der ordnung gleichartige (zusammengehoerige) strukturen an gleichen stellen wiederfinden (wiederfinden/zusammen-rotten)"
--- viele direkt style-attribute zuweisungs hacks => style anpassen und gscheit mit style-klassen arbeiten!
