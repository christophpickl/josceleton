


****************************************

! rename "net.sf.josceleton.josceleton" => to simply: "net.sf.josceleton"
! old oscprocesstarter einarbeiten
!! konfigurations option (evtl fuer Connector, mal schaun) um input koordinaten zu "begradigen" (wenn unter/ober min/max ruecksetzen)
! es sollte nix generische namen haben, wie zb "core" => rename zu "entity" (soll inhalt wirklich beschreiben)
- eigenen playground aufbauen wo josceleton benutzt wird so als waere man aussenstehender => folder yet created: svn/artifact/playground/usage-playground/
! mathe lernen: computergrafik { matrizen, vektoren, vektoren in 3d, trigonomentrie}
	- zb fuer: winkel von arm im ellbogen messen


==========================================
TODOS MIDI PROTOTYPE
==========================================
- @gui: @midi prototype: anstatt "l_hand" eingeben muessen gibts ein dropdown
	* man koennte generell fuer mappings eine "RowComponente" machen
@ midi prototype: keine abhaengigkeit zu mmj (da ja nur fuer osx), sondern nur per Class.forName optional verwenden!

==========================================
TODOS CONSOLE PROTOTYPE
==========================================
! @GUI swing lib nehmen wie damals von spacebasedcomputer project
-- @console LUXURY: gibts noch viiiiele ideen.... aber zb: striktes MVC, dynamisch gesten konfigurieren (fuer MIDI dann zusaetzlich aktionen drauf registrieren)
- @console: fuer jeden user kann man fenster oeffnen fuer positionsansicht
	* anstatt wirklichen 3D kubus (noch zu schwer) => 2d location view idee hernehmen, und 3x machen: oben, vorne, links/rechts
	* wenn dieses fenster gross ist, dann kann man da schon die joint koordinaten gut einzeichnen
	=> nett waere, diese ansicht mit gesten (zb hitwall) zusammenstoppseln; dh dass man dann die wand sieht

==========================================
TODOS @HIRT
==========================================
	- heartbeat stabillizer fertig machen
	- midi prototype fertig
	- range scaling
	// projektmitglied suchen, der sich mit ableton live/synthesizer auskennt
		=> team kooperativ muss er sein

==========================================
TODO ORGANISATION
==========================================
@mantis: muss es selbst configuren koennen, ansonsten halt selbst installieren und hostedapp weg
	zb: status anpassen, svn hooks einbaun (http://alt-tag.com/blog/archives/2006/11/integrating-mantis-and-subversion/)
-- mantis vorgefertigte issue templates machen
-- eigene josceleton email adresse? (da daweil keine domain, irgendwas von sourceforge?)
-- noch lange zeit lassen fuer fixe entscheidung! LOGO
	* viele (verschiedene) ideen/-richtungen
	* grob stehts ja schon fest: skelet, joe
! office pimpen
	- mvn pom structure a la bwin drucken/zeichnen
	- todo categories table drucken/zeichnen
- sourceforge piwik webanalytics (gscheid!) anschaun
- @BETA phase: im osceleton forum fragen, ob jemand meine lib testen will
	* demoapp mit simpler GUI um bewegung/user zu erkennen (nur schaun dass es funkt, quasi proof of concept)
	* demoapp muss seeehr einfach umzugehen sein (will beta tester nicht "belasten", nicht umstaendlich machen)
		-> ein full-blown-clickable JAR machen
- read pom best practices: http://www.sonatype.com/books/mvnref-book/reference/pom-relationships-sect-pom-best-practice.html
- mehr in osceleton news (google group) umschauen


==========================================
TODO WORK ENVIRONMENT
==========================================
! m2eclipse plugin fine tunen
-- shelled (eclipse shellscript editor plugin) installation failed... :(
