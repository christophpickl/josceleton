- @DOC handbook fuer API change
	1 PREPARE:
	* rethink design: draw graphs on paper, see architecture diagrams in doc
	* identify necessary refactorings: dont introduce compile errors => use @Deprecated
	2 EXEC:
	* create/update javadoc for interface (tests will only rely on this specification)
	* change one class at a time + its unit test (unit test wont be affacted of other changes, as it -should!- only test _this_ unit)
	* cleanup legacy code: task tags, refactor (dry, outsource, exceptions)
	* cleanup your own mess ;) resolve FIXMEs (if possible) and basic warnings (eclipse, checkstyle; no pmd&co)
	3 POST:
	* update unit tests (maybe refactor a bit, and enhance a bit)
	* coverage can be a little bit postponed; get 100% coverage all at once after a couple of changes

==========================================
IDEAS
==========================================
! irgendwie das multiuser ding nutzen!
	zb ein spiel (klavier spielen) koennen mehrere gleichzeitig (jeder ein anderes ton/instrument)
! eigener youtube account ist eine wirklich gute idee!
	* eigene videos hochstellen (standard gui skeleton sample, ableton-midi, hitwall klavier, ... sehr simples roboter-ext sample)
	* gute favourites list von anderen kinecthacks machen
	* auf eigener seite dann diese eigenen youtube videos referenzieren... plus gute von anderen auch
! irgendwo das wort KINECTOR verwenden (evtl facade klasse Josceleton?)
* kinect ideen
	! kollaborative puppet control: http://vimeo.com/20367106
	* PoC spiel, aber schoene grafik/animationen: http://vimeo.com/20514415
		=> gscheite (animierte) GUI gehoert her (die mit java sprechen kann)
	* nette idee, wo lichtspot person folgt: http://vimeo.com/20361885
	* das ganze uebers web streamen (multiuser) mit xmlsockets: http://vimeo.com/20320187

- osceleton => openNI "framework" => NITE middleware (libusb, python, etc; bunch of other drivers and stuff ...)
* @SPINOFFS
	-!! ~"debug gui" ... FIX!
		- "josceleton gui debug app" ist ein subprojekt (in mantis), und hat komplett separate versionierung!
		- soll nicht nur app sein, sondern auch wiederverwendbare lib (selber fenster instanziieren, damits wiederverwendbar ist in anderem kontext/main)
	- josceleton+midi rerouter ... JA, fuern hirt
		* @midi rerouter module: das hat josceleton nur als optional=true dependency drinnen!
		- wenn man so will, ist das pulse-midi projekt auch ein spinoff
			kann zum "besseren" spin off werden unter josceleton obhut
			-> das wuerde bedeuten die commons muessen raus aus josceleton (was ist mit jpotpourri???)
	!!!! geil fuer osceleton leute auch: convert oni grossen files in was kleineres ;) (1s == 2mb bekomm ich runter)
	- josceleton+mindstorm ... LUXURY, NICE ;)
	- NO maven invoker ... LUXURY, NAJA => m2eclipse anschaun!
- @hitwall gesture: auch beine/kopf dazunehmen; vertikal volumen ... oder so?; nicht absolut, sondern relativ (vom torso) ist wall entfernt
! IDEE: weggehen von mouse-analogie umsetzen wollen => hin zu neuen bewegungen
	* warum, siehe: http://www.youtube.com/watch?feature=player_embedded&v=2U3RQyCvLvA#at=40
		- mit arm kann man nicht so feine zielgenaue bewegungen machen, ist dann muehsam...
	=> loesung: common-gestures einfuehren (die sollten halt UEBERALL) gleich sein, zb:
			enter ... nach vorne irgendwas (wie zb relative hitwall)
			escape/no/cancel ... xbox position
			vor/zurueck ... indem man nach links/rechts wischt
// gute software == stabile software == einfache schnell zu bedienende software

==========================================
DREAMS
==========================================
- register domain josceleton.org
- use BUILDSERVER (hudson) // evtl sogar auch nexus repo
- @DOC evtl sogar ganz eigenen youtube account anlegen; mehrere -eigene- videos hochladen
- spring bruecke schreiben, um in spring alle josceleton guice zur verfuegung zu haben
