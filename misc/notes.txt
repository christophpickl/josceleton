1. rename other file "notes-maven_deploy..." as it sucks for "notes.txt" :)
2. maybe good idea to rename eclipse projects { corporate, misc, ... } to also start with "net.sf.josceleton."

- aus sich des users denken: wie wird er josceleton einbinden?
	* plain: mit Josceleton (static) facade
	* guice: sehr gut, is schon einzelnes (Private)Module verfuegbar gestellt
		!! @FACADE http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/PrivateModule.html
!!! * !!!SPRING!!! bruecke schreiben, um in spring alle josceleton guice zur verfuegung zu haben
 
- tasktags gscheit einteilen:
	HIGH   ... FIXME, DRY (includes REFACTOR)
	NORMAL ... TODO, REFACTOR, DESIGN, ???, POM
	between-in ... TEST
	LOW    ... TEST, (AOP (includes REFACTOR)), MINOR, SITE, JAVADOC
	// tags: exception
			@TEST{ mock }
			@POM{ dependency, deploy }
			@AOP{ contract }
	// eigentlich auch sowas wie mixins (oder halt pures tagging): "TEST ???"

- move some /misc stuff directly into /josceleton-reactor/_misc

****************** new unsorted 1 ("NACHDEM v0.1 released ist")

!!! in allen poms url ersetzen mit: http://josceleton.sf.net/
!!! move internal guideline/books (release guide, coding guideline) into mvn site!
	@coding guideline ... fluent interfaces, no classes just interfaces (especially for public APIs), immutability, testability, SoC, DRY ~KISS, decoupling,
				max size violation(methods, classes, packages, modules, reactors, projects)
!!! move maven-project-info-reports-plugin from abstract-pom to corporate pom (especially the verson, as it generates a serious WARNING in output)
!!! remove checkstyle absolute path to suppression file, in checkstyle.xml => use some ${var} instead
- directory listing auf sf webserver enablen
- @organization: manche tasktags koennen verschoben werden in luxury.txt (muss halt dann zusaetzlich referenz dazu schreiben, woher dieses tasktag kommt)
- @site: es gibt eine haupt mvn site (alle anderen sind eher unwichtig; oder wie besser strukturieren?)
	- menuitem "samples"
	- menuitem "download" {maven, distribution packages}
	- menuitem "code quality" (auflistung was alles gechecked wird, und dass 100% coverage pflicht ist)
@site release report: auch (neben test coverage, tasktags, pmd, metriken static code analyse, etc) auch anzahl der tests mit auflisten
@site: wenn an site arbeitet von josceleton-reactor, dann muss es schnell gehen -> eigenes profil um alle module wegzuschalten "-PnoModules" ;)

****************** new unsorted 2

- reports (wenn moeglich) aggregieren
	-> {javadoc} ... am schoensten waere aggregat mit nur public modules (zb !nicht! *-impl)
	// was macht man mit javadoc von klasse die man nicht zu sehen bekommt?!
- metriken im build enforcen: (zumindest wenn release dann andere (haertere) werte nehmen)
	* tasktags  (zumindest keine FIXMEs in release)
	* pmd/cpd/findbugs??

- @release handbook:
	* in site metriken updaten; zu jedem release mehrere werte pro modul + gesamt:
		- task tags, coverage, anzahlen (#klassen, zeilen, komplexitaet), pmd/cpd/findbugs errors

- maven-checkstyle-plugin leute frage ob/wann MethodCount unterstuetzt wird

==========================================
TODO * upcoming *
==========================================
!!!!! checkstyle.xml hat hardcoded pfad drinnen, da maven ${config_loc} nicht fressen wollte :(
!!!! checkstyle MethodCount wird nicht vom mvn-plugin gefressen (sogar nicht neueste 2.6 version); wird aber von eclipse-cs gesetzt :(
!!! setup hoster // downloads muessen unbedingt mitgezaehlt werden!
	* setup mantis: alle ideen/todos als kleine tasks organisieren, und WIRKLICH mantis einsetzen, fuer (ziemlich) ALLES !!!
	* setup mvn repo:
		- deployment of own artifacts (bin, src, site)
		- automatic script to deploy all thirdparty artifacts;
		- add repository reference in ~/.m2/settings.xml + server id
			* add guide how to do it in site documentation (<repository>) 

! @eclipse plugin metafile generation
	* how to disable coverage statistics for src/test/java permanently
	* how to set order of main vs test

!! setup site (reports, mvn repo/coordinates samples, diagrams)
- include checkstyle rule check-for-existing-javadoc for all API classes
!! TEST BUILD when running tests, maybe append own log4j logger (programatically? something like a regular overwriting file appender)

SHELLSCRIPT
====================================
LUXURY: kleines gui bauen, wo man mvn schnell ausfuehren kann:
	1. enter mvn command
	2. select (checkbox) artifacts to apply to
	2b. oder besser buttons, a la: "install poms-reactor"
- write report at end (which succeeded/failed; also could count time)
- could provide argument only which will be used as non-default MVN_CMD
- could then also register in PATH, and then just enter "mvnj <mvn_command> [specific artifacts/or all by default]"
- when failing, write file. after fixing problems, could rerun this script and dont rebuild already successfully built projects

==========================================
??? QUESTIONS ???
==========================================
- have factories also to be declared with Scope SINGLETON?
- @TEST best practice?: create impl instantance directly, or use guice factory/provider?

==========================================
TODO * code *
==========================================
!!! should equals/hashCode/toString be final? (check all value objects!)
!! write some javadoc for api classes
! TEST nothing is leaking (close, removeListener) => ebenfalls system-tests dafuer
! check all custom equals implementations, if they are checking instanceof against interface, not *Impl!!! (and if they have shortcut check "if(this == other)")
! ueberall lizenz zeugs header + checkstyle checken lassen ob eh da ist

==========================================
TODO * build *
==========================================
!! improve deployment packages // no one wants to download javadoc ;)
	* (mvn repo -eh klar)
	* jar-with-dependencies
	* zip-with-all-single-modules (optionally dependency libs as jar)
	* sources only (including test source)
	* full package: sources, site (javadoc) and binaries of all josceleton artifacts
!! introduce more profiles
	* disables tests
	* sourceCheck/validations
	* site
	* etc...
	=> eclipse:eclipse, install, ?test?, ?site?
- properly add license.txt file
 
==========================================
IDEAS
==========================================
- @hitwall gesture
	- auch beine/kopf dazunehmen
	- vertikal volumen ... oder so?
	- nicht absolut, sondern relativ (vom torso) ist wall entfernt
- one could merge api and impl projects into one reactor project => josceleton-reactor { commons, core {core-api, core-impl}, connection {...}, josceleton, ... }
