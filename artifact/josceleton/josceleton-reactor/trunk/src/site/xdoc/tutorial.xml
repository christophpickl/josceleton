<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Tutorial</title>
	</properties>
	<body>
	
		<section name="Open a Josceleton Connection">
			
			<p>
				Following section provides samples about connecting to Josceleton with different approaches, which are:
			</p>
			
			<ol>
				<li>Invoke logic directly via the static <code>Josceleton</code> facade class (<i>bad style, bad for testing, static cling</i>).</li>
				<li>Instantiate <code>JosceletonFacade</code> statically once, then pass instance further (<i>good enough, but could be still improved</i>)</li>
				<li>Use the same Dependency Injection framework as Josceleton does: <a href="http://code.google.com/p/google-guice/" target="_blank">Guice</a></li>
				<!-- use spring bridge or something else ... -->
				<li>Configure your framework of choice to inject <code>JosceletonFacade</code> instance.</li>
			</ol>
						
			<subsection name="Use the static Facade">
			
				<p style="font-size:1.3em;">
					<code>Josceleton.openConnection()</code><!-- !!! link to javadoc -->
				</p>
				
				<p>
					The following code snippet uses the facade class <code>Josceleton</code> to open a connection
					(on the default port <code>7110</code>) and add a listener for arbitrary messages and any user:
				</p>
				
				<table>
					<caption align="bottom">
						Sourcecode: Establish a basic connection by using the <code>Josceleton</code> facade
					</caption>
					<tr valign="middle"><td align="center" style="background-color:white;text-align:left;font-size:10pt;">
						<source><![CDATA[
Connection connection = Josceleton.openConnection();

connection.addListener(new ConnectionListener() {
  public void onUserMessage(UserMessage userMessage) {
    String output = "[user " + userMessage.getUser().getOsceletonId() + "] ";
    output += userMessage.getUserState().name();
    System.out.println(output); // prints "[user 1] WAITING" (or PROCESSING, DEAD)
  }

  public void onJointMessage(JointMessage jointMessage) {
    // this will be invoked quiet often ;)

    String output = "[user " + jointMessage.getUser().getOsceletonId() + "] moved";
    if(jointMessage.getJoint() == Joints.HAND().LEFT()) {
  	  output += "left hand: ";
    }

    output += jointMessage.getCoordinate().x() + "/";
    output += jointMessage.getCoordinate().y() + "/";
    output += jointMessage.getCoordinate().z();
    System.out.println(output); // prints "[user 1] moved left hand: 0.342/0.981/1.524"
  }
});

System.out.println("Running ...");

// as the connection is asynchronously we have to close it as well some time later
// connection.close();
]]></source>
					</td></tr>
				</table>
				
			</subsection>
			
			<subsection name="Pass an interface typed instance">
				
				<p style="font-size:1.3em;"><!-- !!! link to javadoc -->
					<code>Josceleton.newFacade()</code>
				</p>
				
				<p>
					Create a <code>JosceletonFacade</code> instance and pass it (or inject it) into your classes as needed.
					This approach is slightly better, as the static access is reduced to one single location.
				</p>
				
				<p>
					The following snippet shows the evolution process of how to access such an instance in four steps.
					The final step is actually equivalent to the first one; this is just what is going on behind the scenes.
				</p>
				
				<table>
					<caption align="bottom">
						Sourcecode: Usage of the non-static facade and it&apos;s internal structure
					</caption>
					<tr valign="middle"><td align="center" style="background-color:white;text-align:left;font-size:10pt;">
						<source><![CDATA[
Injector injector = JosceletonGuice.newInjector();
JosceletonFacade josceleton = new JosceletonFacadeImpl(injector);
Connector connector = josceleton.getConnector();
... connector.openConnection();
]]></source>
					</td></tr>
				</table>
				
			</subsection>
			

		</section>
		
<!--		<section name="Use high-level Connection Services">-->
<!--			<p>WRITE</p>-->
<!--		</section>-->
<!--		<section name="Registering a Position Detector">-->
<!--			<p>WRITE</p>-->
<!--		</section>-->
		
	</body>
</document>

