<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Coding Policy</title>
	</properties>
	<body>
	
		<section name="Coding Policy">
			
			<p>
				First of all, for those who do not already know them, may I present you the <i>21 laws of programming</i>:
			</p>
			
			<ol>
				<li>Any given program, once deployed, is already obsolete.</li>
				<li>It is easier to change the specification to fit the program than vice versa.</li>
				<li>If a program is useful, it will have to be changed.</li>
				<li>If a program is useless, it will have to be documented.</li>
				<li>Only ten percent of the code in any given program will ever execute.</li>
				<li>Software expands to consume all available resources.</li>
				<li>Any non-trivial program contains at least one error.</li>
				<li>The probability of a flawless demo is inversely proportional to the number of people watching, raised to the power of the amount of money involved.</li>
				<li>Not until a program has been in production for at least six months will its most harmful error be discovered.</li>
				<li>Undetectable errors are infinite in variety, in contrast to detectable errors, which by definition are limited.</li>
				<li>The effort required to correct an error increases exponentially with time.</li>
				<li>Program complexity grows until it exceeds the capabilities of the programmer who must maintain it.</li>
				<li>Any code of your own that you haven't looked at in months might as well have been written by someone else.</li>
				<li>Inside every small program is a large program struggling to get out.</li>
				<li>The sooner you start coding a program, the longer it will take.</li>
				<li>A carelessly planned project takes three times longer to complete than expected; a carefully planned project takes only twice as long.</li>
				<li>Adding programmers to a late project makes it later.</li>
				<li>A program is never less than 90% complete, and never more than 95% complete.</li>
				<li>If you automate a mess, you get an automated mess.</li>
				<li>Build a program that even a fool can use, and only a fool will want to use it.</li>
				<li>Users truly don't know what they want in a program until they use it</li>
			</ol>
			
			<p>
				TODO!
			</p>
			
		<!--

coding policy categories:
	. format
	. architektur
	. design
	. naming
	. code
	. comments
	. exception
	. best pracices

* law of diameter
* one (and only one!) stmt per line
* first of all: provide user a code template sample, including: indentation, final, whitespace
* 100% coverage + design for testability + TDD
* split API from IMPL (got internal API)
	- hide implementation completely from API!
* immutability, final, no setters, no state
  - copy/immutable collections, array system copy
  - design for extension (just as checkstyle says)
* favour interfaces over classes (even for VOs? => YES!)
* favour unchecked exceptions
	- all extending single base (JosceletonException)
	- favour static factory methods => protected constructor
	- provide verbose (templated) exception message with adequat factory method's arguments
* fail often, fail early
* refactor often, refactory early ;)
* no overloading => use different name
* no null values! at all!
* keep managable sizes:
	short methods, short classes;
	less classes in pgk, less packages in module;
	less modules in projects;
* DRY
* SoC
* explicity dependencies
* toString pattern
* javadoc (@since) mandatory for API types
* proper exception handling, no "try { ... } catch(Exception e) { ... } " => catch(SpecificException e)!
* statisc is discouraged => use guice singleton scoped dependency
* generally "defensive"; eg argument checks
		
		LINKS TO REPORTS
		coverage
		!!!checkstyle!!! (hat saemtlich rules in summary (hat halt schirches format wenn ohne namespace))
		pmd, cpd, findbugs
		tasktags
		
		
		METRICS/BUILD
		100% coverage (line and branch!)
		pmd, cpd, findbugs
		tasktags
		
		
		TOPICS
		fluent interfaces
		no classes just interfaces (especially for public APIs)
		immutability (final & co); but still open for extensions (hooks, empty non-final methods)
		keep visibility as low as possible (common methods, constructor, even class to package private)
		low coupling, high cohesion
		defensive
		importance of naming
		testability
		SoC
		small parts (methods, classes, packages, modules, reactors, projects)
		DRY
		~KISS
		exceptions (unchecked, chaining)
		 -->

		</section>
		
	</body>
</document>
